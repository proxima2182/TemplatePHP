<?php

namespace Views\Admin;

use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\HTTP\ResponseInterface;
use Config\Services;
use Psr\Log\LoggerInterface;
use Views\BaseViewController;

class BaseAdminController extends BaseViewController
{
    /**
     * links for pages
     * @var string[]
     */
    protected array $links;

    /**
     * to check permission when user access page automatically
     * @var bool
     */
    protected bool $isRestricted = false;

    /**
     * to check login when user access page automatically
     * @var bool
     */
    protected bool $isCheckLogin = false;

    public function __construct()
    {
        $this->setLanguage();
        $this->links = [
            [
                'name' => lang('Service.category'),
                'link' => '/admin/category',
            ],
            [
                'name' => lang('Service.board'),
                'link' => '/admin/board',
            ],
            [
                'name' => lang('Service.reply'),
                'link' => '/admin/topic/reply',
            ],
            [
                'name' => lang('Service.reservation'),
                'link' => '/admin/reservation-board',
            ],
            [
                'name' => lang('Service.user'),
                'link' => '/admin/user',
            ],
            [
                'name' => lang('Service.location'),
                'link' => '/admin/location',
            ],
            [
                'name' => lang('Service.graphic_setting'),
                'link' => '/admin/graphic-setting',
            ],
            [
                'name' => lang('Service.setting'),
                'link' => '/admin/setting',
            ],
        ];
    }

    public function initController(RequestInterface $request, ResponseInterface $response, LoggerInterface $logger)
    {
        parent::initController($request, $response, $logger); // TODO: Change the autogenerated stub
        if ($this->isRestricted) {
            $this->checkPermission();
        }
        if ($this->isCheckLogin) {
            $this->checkLogin();
        }
    }

    /**
     * admin 페이지에 대한 접근 체크 기능
     * @return void
     */
    protected function checkPermission(): void
    {
        if (!$this->session->is_login) {
            $response = Services::response();
            $response->setBody(view('/redirect', [
                'path' => '/admin/login',
            ]));
            $response->sendBody();
            exit;
        }
        if (!$this->session->is_admin) {
            $response = Services::response();
            $response->setBody(view('/error', [
                'code' => '403',
                'title' => 'Forbidden',
                'message' => 'this page is not allowed for your account.<br/> please check your account type is \'admin\' or \'member\'.',
            ]));
            $response->sendBody();
            exit;
        }
    }

    /**
     * login 상태일 때 페이지에 대한 접근 체크 기능
     * @return void
     */
    protected function checkLogin(): void
    {
        if ($this->session->is_login) {
            $response = Services::response();
            $response->setBody(view('/redirect', [
                'path' => '/admin/profile',
            ]));
            $response->sendBody();
            exit;
        }
    }

    /**
     * 공통 header 부분 출력 기능
     * @param array $data
     * @param array $initData
     * @return string
     */
    protected function loadHeader(array $data, array $initData = []): string
    {
        $initData = array_merge($initData, [
            'links' => $this->links,
            'is_admin_navigation_closed' => $_COOKIE['is-admin-navigation-closed'] ?? 0,
        ]);
        return view('admin/header', parent::loadDataForHeader($data, $initData));
    }

    /**
     * 공통 footer 부분 출력 기능
     * @return string
     */
    protected function loadFooter(): string
    {
        return view('admin/footer');
    }

    /**
     * body 출력 시에 공통적으로 load 될 데이터 호출 기능
     * @return array
     */
    protected function getViewData(): array
    {
        return array_merge(parent::getViewData(), [
            'is_admin_page' => true
        ]);
    }
}
